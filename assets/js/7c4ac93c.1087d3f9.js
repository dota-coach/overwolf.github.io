"use strict";(self.webpackChunkengine=self.webpackChunkengine||[]).push([[5050],{35318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(27378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,h=d["".concat(l,".").concat(u)]||d[u]||c[u]||i;return n?r.createElement(h,o(o({ref:t},m),{},{components:n})):r.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},45935:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(25773),a=(n(27378),n(35318));const i={id:"instream-ads",image:"/img/embed/getting-started.jpg",title:"[Experimental] Instream Ads",sidebar_custom_props:{tags:{overwolf_platform:!0,electron_platform:!0}}},o=void 0,s={unversionedId:"start/monetize-your-app/experimental/instream-ads",id:"start/monetize-your-app/experimental/instream-ads",title:"[Experimental] Instream Ads",description:"Instream Advertising is the practice of playing content within actual conten,",source:"@site/../pages/start/monetize-your-app/experimental/instream-ads.mdx",sourceDirName:"start/monetize-your-app/experimental",slug:"/start/monetize-your-app/experimental/instream-ads",permalink:"/start/monetize-your-app/experimental/instream-ads",draft:!1,editUrl:"https://github.com/overwolf/overwolf.github.io/tree/source/pages/../pages/start/monetize-your-app/experimental/instream-ads.mdx",tags:[],version:"current",lastUpdatedBy:"OdedItkinOW",lastUpdatedAt:1707928916,formattedLastUpdatedAt:"Feb 14, 2024",frontMatter:{id:"instream-ads",image:"/img/embed/getting-started.jpg",title:"[Experimental] Instream Ads",sidebar_custom_props:{tags:{overwolf_platform:!0,electron_platform:!0}}},sidebar:"start",previous:{title:"[Experimental] CPA Ads",permalink:"/start/monetize-your-app/experimental/cpa-ads"},next:{title:"App Knowledge base",permalink:"/start/maintain-your-app/add-a-knowledge-base-to-app"}},l={},p=[{value:"Technical Specification",id:"technical-specification",level:2},{value:"Example Implementation",id:"example-implementation",level:3}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Instream Advertising is the practice of playing content ",(0,a.kt)("em",{parentName:"p"},"within")," actual conten,\nrather than only outside of/next to it (also known as Outstream Advertising)."),(0,a.kt)("p",null,'In the context of Overwolf, we have recently began testing of a new, Instream advertising format,\ntargeting places in your App where a video of content will be played, by allowing the App\nto show an Ad before starting the video content, as a "preroll" Ad of sorts.'),(0,a.kt)("h2",{id:"technical-specification"},"Technical Specification"),(0,a.kt)("p",null,"The Overwolf ",(0,a.kt)("a",{parentName:"p",href:"/start/monetize-your-app/advertising/ads-sdk"},"Ads SDK")," allows you to easily create\ninstream Ads, by utilizing a container element. This container, MUST fit the following criteria:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The container MUST be transparent, and pass input through (except when an Ad is showing)"),(0,a.kt)("li",{parentName:"ul"},'The container MUST ALWAYS be of the same size/location as the video it is "related" to (even if the player is resized/moved)')),(0,a.kt)("p",null,"Apart from that, the video itself also MUST:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Be longer than 5 seconds"),(0,a.kt)("li",{parentName:"ul"},"Be played in a video player bigger than 640x480 pixels (width/height respectively)")),(0,a.kt)("h3",{id:"example-implementation"},"Example Implementation"),(0,a.kt)("p",null,"Assuming the following element structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Component Structure"',title:'"Component','Structure"':!0},"video-content # Controlling the size of all children, who are overlaid on top of eachother\n\u251c\u2500\u2500 video-player # The actual video player\n\u251c\u2500\u2500 instream-container # A transparent, passthrough div to contain the instream Ad\n")),(0,a.kt)("p",null,"The following code should work:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example Implementation"',title:'"Example','Implementation"':!0},"/** The properties used for Instream Ads */\ntype InstreamAdProperties = {\n  /** Is this an instream Ad. Set to true for this set of properties */\n  instream: true;\n  /** The duration of the video this instream Ad will be played in */\n  streamDurationMs: number;\n  /**\n   * The number of the video this instream Ad will be played in in the current session\n   * \n   * For example:\n   * - The first video in a session will be `1`.\n   * - The second video in a session will be `2`.\n   * - The `n`th video in a session will be `n`.\n   */\n  streamVideoCount: number;\n  /** The volume that should be used for the instream Ad (between 0 and 1, defaults to 1) */\n  volume?: number;\n}\n\n// Get the container for the Instream Ad Container\nconst containerElement = document.getElementById(/* 'instream-container' */);\n\n// Create the instream Ad\nconst instream = new OwAd(containerElement, {\n  instream: true,\n  streamDurationMs: 10000,\n  streamVideoCount: 1,\n  volume: 1,\n} as InstreamAdProperties)\n\n// Add relevant event listeners.\ninstream.addEventListener('video_ad_skipped', () => {\n  // onAdSkipped();\n  shutdown();\n});\ninstream.addEventListener('complete', () => {\n  // onAdCompleted();\n  shutdown();\n});\n\n// The command to shut down the instream Ad once it's been played.\nconst shutdown = () => instream.shutdown();\n")))}d.isMDXComponent=!0}}]);